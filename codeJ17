         0-- 1-- 2-- 3-- 4-- 5-- 6-- 7--
Program: 2,4,1,2,7,5,4,3,0,3,1,7,5,5,3,0

Note le saut vers autre chose que 0 est impossible le code est donc le suivant

// Literalement
0 B = A%8
1 B = B^010
2 C = A/2**B
3 B = B^C
4 A = A/8(=2**3)
5 B = B^111
6 print B%8
7 Si A == 0 fin Sinon retour a 0

// simplification 1
0 B = A%8
1 B = B^010
2 C = A/2**B
3 B = B^C
4 A = A/8(=2**3)
5 B = 7-B <--
6 print B%8
7 Si A == 0 fin Sinon retour a 0

// simplification 2
0 B = A%8
1 B = B^010
2 C = A/2**B
3 B = B^C
4 A = A/8(=2**3)
Supr <--
6 print (7-B)%8 <--
7 Si A == 0 fin Sinon retour a 0

// Note 1
A est divisee par 8 a chaque boucle et un print
A entre 8**13 et 8**14

// Note 2 
les 3 caracteres effacer par la division par 8 sont trois caracteres recuperer dans B

// simplifiction 3 par deplacement de la ligne 4
0 B = A%8
1 B = B^010
2 C = A/2**B
3 B = B^C
6 print (7-B)%8
4 A = A/8(=2**3) <--
7 Si A == 0 fin Sinon retour a 0

// Simplification 4 injection de 3 dans 6
0 B = A%8
1 B = B^010
2 C = A/2**B
6 print (7-B^C)%8 <--
4 A = A/8(=2**3)
7 Si A == 0 fin Sinon retour a 0

// Simplification 4 injection de 0 dans 1 (et renommage de 1 en 0 pour la redirection)
0 B = (A%8)^010 <--
2 C = A/2**B
6 print (7-B^C)%8 
4 A = A/8(=2**3)
7 Si A == 0 fin Sinon retour a 0

// Simplification 4 injection de 0 et 2 dans 6 (et renommage de 6 en 0 pour la redirection)
0 print (7-((A%8)^010)^(A/2**((A%8)^010)))%8 <--
4 A = A/8(=2**3)
7 Si A == 0 fin Sinon retour a 0
