#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <assert.h>
#include <time.h>
#include <limits.h>

#define TAILLEMATRICE 150
 
typedef struct etat{
    int poids; 
    int x;
    int y;
}etat;

typedef struct filedeprio{
    int taillealloue;
    int taille;
    etat* file; 
}filedeprio;

void initfile(filedeprio * f){
    f->taillealloue = 1;
    f->taille = 0;
    etat * tab = malloc(sizeof(etat));
    f->file = tab;
}

void libererfile(filedeprio * f){
    free(f->file);
}

void copier(etat* copie, etat* tabacopier, int taille){
    for (int i=0; i<taille;i++){
        copie[i] = tabacopier[i];
    }
}

void swap(etat tab[], int i, int j){
    etat tmp = tab[i];
    tab[i] = tab[j];
    tab[j] = tmp;
}

void reordonnerinsertion(filedeprio* f,int indice){
    if (indice == 0){return;}
    if (f->file[indice].poids < f->file[(indice-1)/2].poids){
        swap(f->file, indice, (indice-1)/2);
        reordonnerinsertion(f,(indice-1)/2);
    }
}

void inserer(filedeprio* f, etat val){
    if (f->taille < f->taillealloue){
        f->file[f->taille] = val;
        reordonnerinsertion(f, f->taille);
        f->taille++;
    }
    else{
        f->taillealloue = 2*f->taillealloue;
        etat * nouvellefile = malloc(sizeof(etat) * f->taillealloue);
        copier(nouvellefile, f->file, f->taille);
        free(f->file);
        f->file = nouvellefile;
        inserer(f,val);
    }
}

void reordonnerpop(filedeprio* f, int indice) {
    int plus_petit = indice;
    int gauche = (2 * indice) + 1;
    int droite = (2 * indice) + 2;

    if (gauche < f->taille && f->file[gauche].poids < f->file[plus_petit].poids) {
        plus_petit = gauche;
    }
    if (droite < f->taille && f->file[droite].poids < f->file[plus_petit].poids) {
        plus_petit = droite;
    }

    if (plus_petit != indice) {
        swap(f->file, indice, plus_petit);
        reordonnerpop(f, plus_petit);
    }
}

etat pop(filedeprio* f){
    assert(f->taille>0);
    f->taille--;
    etat retour = f->file[0];
    f->file[0] = f->file[f->taille];
    reordonnerpop(f,0);
    return retour;
}

int djkstra(char matrice[TAILLEMATRICE][TAILLEMATRICE],int xd,int yd,int xa,int ya){
    
    etat etatinit = {.poids = 0, .x = xd, .y = yd };
    filedeprio* f = malloc(sizeof(filedeprio));
    initfile(f);
    inserer(f,etatinit);

    bool visites[TAILLEMATRICE][TAILLEMATRICE] = {false};

    while (true){

        etat etatactuel = pop(f);

        if (visites[etatactuel.x][etatactuel.y]){continue;}
        visites[etatactuel.x][etatactuel.y] = true;


        if(etatactuel.x == xa && etatactuel.y == ya){
            libererfile(f);
            free(f);
            return etatactuel.poids;
        } 

        if (matrice[etatactuel.x + 1][etatactuel.y] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x + 1, 
                                .y = etatactuel.y, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x - 1][etatactuel.y] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x - 1, 
                                .y = etatactuel.y, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x][etatactuel.y + 1] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x, 
                                .y = etatactuel.y + 1, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x][etatactuel.y - 1] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x, 
                                .y = etatactuel.y - 1, 
                                };
            inserer(f,etatsuivant);
        }
    }


    free(f);
    libererfile(f);
    return 0;
}

int etoile1(const char *nom_fichier) {
    FILE *fichier = fopen(nom_fichier, "r");
    

    int xdepart,ydepart, xarrive,yarrive;
    char matrice[TAILLEMATRICE][TAILLEMATRICE] = {0};

    char ligne[10000]; 

    int taille = 0;
    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        if (ligne[0] == '\n'){break;}
        int k = 0;
        matrice[taille][0] = '#';
        for(;ligne[k] != '\0'&& ligne[k] != '\n' ;k++) {
            if (ligne[k] == 'S'){xdepart=taille;ydepart=k;matrice[taille][k] = '.';}
            else if (ligne[k] == 'E'){xarrive=taille;yarrive=k;matrice[taille][k] = '.';}
            else {matrice[taille][k] = ligne[k];}
        }
        for (;k<TAILLEMATRICE;k++) {
            matrice[taille][k] = '#'; //hors limite
        }
        taille++;
    }

    for (int i = taille;i<TAILLEMATRICE;i++){
        for (int j = 0;j<TAILLEMATRICE;j++){
            matrice[i][j] = '#';
        }
    }

    int tempsDeReference = djkstra(matrice, xdepart,ydepart,xarrive,yarrive);

    int retour = 0;
    // Un racourcis permet uniquement de sauter un unique obstacle

    for(int i = 1; i< taille - 1; i++){
        for(int j = 1; j< taille - 1; j++){
            if (matrice[i][j] == '#'){
                matrice[i][j] = '.';
                if (tempsDeReference - djkstra(matrice, xdepart,ydepart,xarrive,yarrive) >= 100){retour++;}
                matrice[i][j] = '#';
            }
        }
    }


    fclose(fichier);
    return retour;
}

int abs(int a){
    if(a>0){return a;}
    return -a;
}

int dist(int x1,int y1,int x2,int y2){
    return abs(x2-x1)+abs(y2-y1);
}

bool djkstramoinsde(int seuil,char matrice[TAILLEMATRICE][TAILLEMATRICE],int xd,int yd,int xa,int ya){
    
    etat etatinit = {.poids = 0, .x = xd, .y = yd };
    filedeprio* f = malloc(sizeof(filedeprio));
    initfile(f);
    inserer(f,etatinit);

    bool visites[TAILLEMATRICE][TAILLEMATRICE] = {false};

    while (true){

        etat etatactuel = pop(f);

        if (visites[etatactuel.x][etatactuel.y]){continue;}
        visites[etatactuel.x][etatactuel.y] = true;


        if(etatactuel.x == xa && etatactuel.y == ya){
            libererfile(f);
            free(f);
            return true;
        } 

        if(etatactuel.poids >= seuil){
            libererfile(f);
            free(f);
            return false;
        } 

        if (matrice[etatactuel.x + 1][etatactuel.y] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x + 1, 
                                .y = etatactuel.y, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x - 1][etatactuel.y] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x - 1, 
                                .y = etatactuel.y, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x][etatactuel.y + 1] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x, 
                                .y = etatactuel.y + 1, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x][etatactuel.y - 1] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x, 
                                .y = etatactuel.y - 1, 
                                };
            inserer(f,etatsuivant);
        }
    }


    free(f);
    libererfile(f);
    return false;
}

int djkstra2(char matrice[TAILLEMATRICE][TAILLEMATRICE],int xd,int yd,int xa,int ya, int x1, int y1, int x2, int y2){ // avec le reccourcis x1 y1 <-> x2 y2
    
    etat etatinit = {.poids = 0, .x = xd, .y = yd };
    filedeprio* f = malloc(sizeof(filedeprio));
    initfile(f);
    inserer(f,etatinit);

    bool visites[TAILLEMATRICE][TAILLEMATRICE] = {false};

    while (true){

        etat etatactuel = pop(f);

        if (visites[etatactuel.x][etatactuel.y]){continue;}
        visites[etatactuel.x][etatactuel.y] = true;


        if(etatactuel.x == xa && etatactuel.y == ya){
            libererfile(f);
            free(f);
            return etatactuel.poids;
        } 

        if (matrice[etatactuel.x + 1][etatactuel.y] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x + 1, 
                                .y = etatactuel.y, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x - 1][etatactuel.y] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x - 1, 
                                .y = etatactuel.y, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x][etatactuel.y + 1] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x, 
                                .y = etatactuel.y + 1, 
                                };
            inserer(f,etatsuivant);
        }
        if (matrice[etatactuel.x][etatactuel.y - 1] != '#'){
            etat etatsuivant = {.poids = etatactuel.poids + 1,
                                .x = etatactuel.x, 
                                .y = etatactuel.y - 1, 
                                };
            inserer(f,etatsuivant);
        }
        if (etatactuel.x == x1 && etatactuel.y == y1){
            etat etatsuivant = {.poids = etatactuel.poids + dist(x1,x2,y1,y2),
                                .x = x2, 
                                .y = y2, 
                                };
            inserer(f,etatsuivant);
        }
        if (etatactuel.x == x2 && etatactuel.y == y2){
            etat etatsuivant = {.poids = etatactuel.poids + dist(x1,x2,y1,y2),
                                .x = x1, 
                                .y = y1, 
                                };
            inserer(f,etatsuivant);
        }
    }


    free(f);
    libererfile(f);
    return 0;
}

int etoile2(const char *nom_fichier) {
    FILE *fichier = fopen(nom_fichier, "r");
    

    int xdepart,ydepart, xarrive,yarrive;
    char matrice[TAILLEMATRICE][TAILLEMATRICE] = {0};

    char ligne[10000]; 

    int taille = 0;
    while (fgets(ligne, sizeof(ligne), fichier) != NULL) {
        if (ligne[0] == '\n'){break;}
        int k = 0;
        matrice[taille][0] = '#';
        for(;ligne[k] != '\0'&& ligne[k] != '\n' ;k++) {
            if (ligne[k] == 'S'){xdepart=taille;ydepart=k;matrice[taille][k] = '.';}
            else if (ligne[k] == 'E'){xarrive=taille;yarrive=k;matrice[taille][k] = '.';}
            else {matrice[taille][k] = ligne[k];}
        }
        for (;k<TAILLEMATRICE;k++) {
            matrice[taille][k] = '#'; //hors limite
        }
        taille++;
    }

    for (int i = taille;i<TAILLEMATRICE;i++){
        for (int j = 0;j<TAILLEMATRICE;j++){
            matrice[i][j] = '#';
        }
    }

    int tempsDeReference = djkstra(matrice, xdepart,ydepart,xarrive,yarrive);

    int retour = 0;
    // Un racourcis permet uniquement de sauter un unique obstacle

    for(int x1 = 1; x1< taille - 1; x1++){
        for(int y1 = 1; y1< taille - 1; y1++){
            if (matrice[x1][y1] != '.' ){continue;}
            for(int x2 = x1+1; x2< taille - 1; x2++){
                for(int y2 = (y1+1) * (x1 == x2); y2< taille - 1; y2++){
                    if (matrice[x2][y2] != '.' ){continue;}
                    if (dist(x1,x2,y1,y2)>=20){continue;}//racourcis impossible
                    if (djkstramoinsde(60,matrice,x1,y1,x2,y2)){continue;}//racourcis pas rentable
                    if (tempsDeReference - djkstra2(matrice, xdepart,ydepart,xarrive,yarrive,x1,y1,x2,y2) >= 100){retour++;}
                }
            }
        }
        printf("%d\n",x1);
    }


    fclose(fichier);
    return retour;
}

int main(){
    printf("!! Manque d optimisation attendre une ou deux minutes !! \n");
    //printf("etoile 1 : %d\n",etoile1("entreeJ20.txt"));
    printf("etoile 2 : %d\n",etoile2("entreeJ20.txt"));  
    return 0;
} 